# Set up the prompt

autoload -Uz promptinit
autoload -U history-search-end

#promptinit
#prompt adam1

setopt histignorealldups sharehistory
setopt appendhistory extendedglob
unsetopt autocd beep
# Use emacs keybindings even if our EDITOR is set to vi
bindkey -v

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
autoload U colors && colors
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
setopt correct
export SPROMPT="Correct $fg[red]%R$reset_color to $fg[green]%r$reset_color? [Yes, No, Abort, Edit] "

#history searching with UP and DOWN
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^[OA" history-beginning-search-backward-end
bindkey "^[OB" history-beginning-search-forward-end

[ -f ~/.aliases ] && . ~/.aliases
# Remap clear-screen since ^L is taken by tmux-vim
bindkey "^O" clear-screen

LS_COLORS=$LS_COLORS:'st=8;30:' ; export LS_COLORS

function spwd {
  paths=(${(s:/:)PWD})

  cur_path='/'
  cur_short_path='/'
  for directory in ${paths[@]}
  do
    cur_dir=''
    for (( i=0; i<${#directory}; i++ )); do
      cur_dir+="${directory:$i:1}"
      matching=("$cur_path"/"$cur_dir"*/)
      if [[ ${#matching[@]} -eq 1 ]]; then
        break
      fi
    done
    cur_short_path+="$cur_dir/"
    cur_path+="$directory/"
  done

  enddir=($(basename `pwd`))
  begdirs=($(printf %q "${cur_short_path: : -1}" | rev | cut -d "/" -f2- | rev ))
  printf %q "$begdirs/$enddir"
  echo
}

setopt PROMPT_SUBST
#pwd2pr=${"$(spwd)"//\/h\/u01/"~"} 
PS1='%(?.%F{green}âˆš.%F{red}?%?)%f %F{yellow}SET2%f%B%F{cyan}${"$(spwd)"//\/h\/u0(133458|1)/"~"}%F{white} %# %b%f%k'
#PS1='%F{yellow}SET2%f%B%F{cyan}%(4~|...|)%3~ $pwd2pr%F{white} %# %b%f%k'

ls

stty -ixon
source /home/u0133458/.config/broot/launcher/bash/br
#~/.testshift.sh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('/home/u0133458/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
#    eval "$__conda_setup"
#else
    if [ -f "/home/u0133458/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/u0133458/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/u0133458/anaconda3/bin:$PATH"
    fi
#fi
#unset __conda_setup
# <<< conda initialize <<<


# PATH="/home/u0133458/perl5/bin${PATH:+:${PATH}}"; export PATH;
# PERL5LIB="/home/u0133458/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
# PERL_LOCAL_LIB_ROOT="/home/u0133458/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
# PERL_MB_OPT="--install_base \"/home/u0133458/perl5\""; export PERL_MB_OPT;
# PERL_MM_OPT="INSTALL_BASE=/home/u0133458/perl5"; export PERL_MM_OPT;
